using ChronoTrace.ProfilingInternals.DataExport.Json;
using ChronoTrace.ProfilingInternals.Settings;

namespace ChronoTrace.ProfilingInternals;

/// <summary>
/// Provides access to the current <see cref="ProfilingContext"/> for the ambient profiling scope.
/// This class ensures that profiling data is correctly associated with its originating operation.
/// </summary>
/// <remarks>
/// <para>
///   IMPORTANT: INTERNAL LIBRARY USE ONLY.
/// </para>
/// <para>
///   While this class is <c>public</c> to be accessible by instrumentation code generated by the
///   <c>ChronoTrace</c> code generator, application developers should not interact with it directly.
///   The <c>ChronoTrace</c> library manages the context lifecycle via this accessor for its internal operations.
/// </para>
/// </remarks>
public sealed class ProfilingContextAccessor
{
    private static readonly AsyncLocal<ProfilingContext?> Context = new AsyncLocal<ProfilingContext?>();

    /// <summary>
    /// Gets the <see cref="ProfilingContext"/> for the current profiling scope.
    /// </summary>
    /// <remarks>
    /// <para>
    ///   While it is <c>public</c> to be accessible by instrumentation code generated by the
    ///   <c>ChronoTrace</c> code generator, application developers should not interact with it directly.
    /// </para>
    /// </remarks>
    /// <returns>The <see cref="ProfilingContext"/> for the current asynchronous scope.</returns>
    public static ProfilingContext Current
    {
        get
        {
            var visitor = JsonExporterFactory.MakeJsonExporter(ProfilingSettingsProvider.GetSettings());
            Context.Value ??= new ProfilingContext(visitor);
            return Context.Value;
        }
    }
}
