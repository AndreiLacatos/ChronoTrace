using System.Text;

namespace ChronoTrace.SourceGenerators.SourceGenerator.NameProviders;

/// <summary>
/// A utility class responsible for converting input variable names
/// into a specific format suitable for generated code.
/// </summary>
/// <remarks>
/// This converter helps ensure that variable names generated by a source generator
/// have a consistent and predictable pattern, reducing the chance of naming conflicts
/// with user-defined code or other generated symbols.
/// </remarks>
internal sealed class GeneratedVariableNameConverter
{
    private const string Prefix = "__ChronoTrace";

    /// <summary>
    /// Converts an input variable name to a generated variable name format.
    /// </summary>
    /// <param name="variableName">The original variable name to convert.</param>
    /// <returns>
    /// The transformed variable name. For example:
    /// </returns>
    internal string ToGeneratedVariableName(string variableName)
    {
        var resultBuilder = new StringBuilder(Prefix).Append('_');

        resultBuilder.Append(char.ToUpper(variableName[0]));

        for (var i = 1; i < variableName.Length; i++)
        {
            var currentChar = variableName[i];

            if (char.IsUpper(currentChar))
            {
                if (resultBuilder[^1] != '_')
                {
                    var previousChar = variableName[i-1];
                    var nextCharIsLowerOrEnd = (i + 1 < variableName.Length && char.IsLower(variableName[i+1]))
                        || i + 1 == variableName.Length;

                    if (char.IsLower(previousChar)
                        || (char.IsUpper(previousChar) && nextCharIsLowerOrEnd && i > 1)
                        || char.IsUpper(previousChar) && !nextCharIsLowerOrEnd && resultBuilder[^1] != '_')
                    {
                         resultBuilder.Append('_');
                    }
                }
            }

            resultBuilder.Append(currentChar);
        }

        return resultBuilder.ToString();
    }
}
