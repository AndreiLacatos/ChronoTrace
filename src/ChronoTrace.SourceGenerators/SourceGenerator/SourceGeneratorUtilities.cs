using System;
using System.Text;
using ChronoTrace.ProfilingInternals.Compat;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static System.String;

namespace ChronoTrace.SourceGenerators.SourceGenerator
{
    /// <summary>
    /// Provides utility methods for common tasks in Roslyn source generators,
    /// such as generating standard file headers, defining necessary attributes,
    /// and formatting generated C# source code.
    /// </summary>
    /// <remarks>
    /// This class centralizes common formatting and boilerplate generation, ensuring
    /// consistency across multiple generated source files.
    /// </remarks>
    internal class SourceGeneratorUtilities
    {
        private readonly ITimeProvider _timeProvider;
        private readonly string _version;

        internal SourceGeneratorUtilities(
            ITimeProvider timeProvider,
            string version)
        {
            _timeProvider = timeProvider;
            _version = version;
        }

        /// <summary>
        /// The template for the standard header prepended to all auto-generated source files.
        /// </summary>
        private const string HeaderTemplate =
            "// <auto-generated>\n" +
            "//\n" +
            "// ╔════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n" +
            "// ║                                                                                                            ║\n" +
            "// ║    This file was auto-generated by ChronoTrace.SourceGenerators                                            ║\n" +
            "// ║                                                                                                            ║\n" +
            "// ║    This file should not be edited! Manual changes may cause incorrect behavior and will be overwritten.    ║\n" +
            "// ║                                                                                                            ║\n" +
            "// ╠════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n" +
            "// {0}\n" +
            "// ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n" +
            "//\n" +
            "// </auto-generated>";


        /// <summary>
        /// Generates the C# source code definition for the <c>System.Runtime.CompilerServices.InterceptsLocationAttribute</c>.
        /// This attribute is required for the C# Interceptors feature.
        /// </summary>
        /// <returns>A string containing the formatted C# source code for the attribute definition.</returns>
        internal string MakeInterceptsLocationAttribute()
        {
            return FormatSourceCode(
                "namespace System.Runtime.CompilerServices;\n\n" +
                "[global::System.Diagnostics.Conditional(\"DEBUG\")]\n" +
                "[global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true, Inherited = false)]\n" +
                "#pragma warning disable CS9113 // ignore warning thrown for unread parameters\n" +
                "public sealed class InterceptsLocationAttribute(int version, string data) : global::System.Attribute;\n" +
                "#pragma warning restore CS9113"
            );
        }


        /// <summary>
        /// Formats a Roslyn <see cref="CompilationUnitSyntax"/> into a string representation
        /// with normalized whitespace and prepends the standard auto-generated file header.
        /// </summary>
        /// <param name="unit">The <see cref="CompilationUnitSyntax"/> representing the root of a C# source file.</param>
        /// <returns>A string containing the fully formatted C# source code, including the header.</returns>
        internal string FormatCompilationUnitSyntax(CompilationUnitSyntax unit)
        {
            return FormatSourceCode(unit.NormalizeWhitespace().GetText(Encoding.UTF8).ToString());
        }

        /// <summary>
        /// Prepends the standard auto-generated file header to the given source code string.
        /// </summary>
        /// <param name="sourceCode">The raw C# source code content.</param>
        /// <returns>The provided source code with the standard header added at the beginning.</returns>
        internal string FormatSourceCode(string sourceCode) => $"{MakeHeader()}\n\n\n{sourceCode}";

        private string MakeHeader()
        {
            const int contentWidth = 100;

            // construct the left and right parts of the line.
            var timestamp = _timeProvider.GetUtcNow().ToString("yyyy-MM-dd HH:mm:ss");
            var leftText = $"Generated: {timestamp} UTC";
            var rightText = $"ChronoTrace version: {_version}";

            // calculate the required padding between the two parts.
            var spaceCount = Math.Max(0, contentWidth - leftText.Length - rightText.Length);
            var padding = new string(' ', spaceCount);

            // assemble the full dynamic line
            var fullLine = $"║    {leftText}{padding}{rightText}    ║";
            return Format(HeaderTemplate, fullLine);
        }
    }
}
